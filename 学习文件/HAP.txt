加载
 // 从物理路径的文件加载
   var doc = new HtmlDocument();
   doc.Load(filePath);//文件路径
 
   从Stream当中加载
   var doc = new HtmlDocument();
   doc.LoadHtml(html);

  // 从网页的Url链接加载
   var url = "http://www.cnblogs.com/xuliangxing/";
   var web = new HtmlWeb();
   var doc = web.Load(url);


获得节点的方法
var value = doc.DocumentNode
 .SelectNodes("//td/input")
 .First()
 .Attributes["value"].Value;
/下面的意思是：通过属性id的值，来定位header下的blogTitle节点信息
4 HtmlNode titleNode = doc.DocumentNode.SelectSingleNode("//div[@id='header']/div[@id='blogTitle']");
备注：注意路径里"//"表示从根节点开始查找，两个斜杠‘//’表示查找所有childnodes；一个斜杠'/'表示只查找第一层的childnodes（即不查找grandchild）；点斜杠"./"表示从当前结点而不是根结点开始查找。
我们接着上面titleNode节点。
我们还可以不通过属性id去定位，还有通过索引去定位，如下所示，这个效果和上面是等同的
下面的意思是：通过索引定位，div[2]是表示根节点的第二个
HtmlNode titleNode = doc.DocumentNode.SelectSingleNode("//div[2]/div[1]");

HtmlNode单个节点和SelectSingleNode一起使用，
HtmlNodeCollection返回所有的子节点和SelectNodes一起使用


得到结点的文字内容或Html内容
HtmlNode类设计了OuterHtml属性和InnerHtml属性用于获取当前节点的Html源码。两者不同之处是，
OuterHtml属性返回的是包含当前节点的Html代码在内的所有Html代码，而InnerHtml属性返回的是当前节点里面子节点的所有Html代码，
InnerText属性过滤掉了所有的Html标记代码，只返回文本值。



节点的修改
如何去掉外层的html tag只留下文本内容
用remove方法。那你需要先得到这个Html结点，通过remove方法删除掉多余的HTML Tag假设该节点叫Node:Node.ParentNode.RemoveChild(Node,true); 



显示获得的节点
可以用一个textbox来接收获得的节点并显示出来。在控制台程序用文本文档保存和显示



如何去掉外层的html tag只留下文本内容
用remove方法。那你需要先得到这个Html结点，通过remove方法删除掉多余的HTML Tag假设该节点叫Node:Node.ParentNode.RemoveChild(Node,true); 



学习使用HtmlAgilityPack要会一点html基础，我就在网上找了点知识点看了看。
属性总是以名称/值对的形式出现，比如：name="value"。
属性都是写在开始标签内的如：<h1 align="center"> 拥有关于对齐方式的附加信息。

段落元素是由p标签定义的 <p>这是段落。</p><p>这是段落。</p><p>这是段落。</p>下自动换行。
在 <p></p>之间输入空格或者换行文字之间只保留一个空格




//*[@id="Col1-2-SportsStream"]/ul

#Col1-2-SportsStream > ul

//div[@id="Col1-2-SportsStream"]/ul/li


//*[@id="UH-0-SportsUH-0-Header"]
#Col1-2-SportsStream > ul
//*[@id="Col1-2-SportsStream"]/ul/li[2]/div/div/div[1]/div
//*[@id="Col1-2-SportsStream"]/ul/li[2]/div/div/div[1]/div/img












 1 using System; 2 using System.Collections.Generic; 3 using System.Linq; 
4 using System.Text; 5 using System.Net.Sockets; 6 using System.IO; 
7 using System.Threading.Tasks; 8 using System.Threading; 9 using System.Net;10 
11 namespace ConsoleApplication112 {13   
  class Program14 
    { 
       static void Main(string[] args)16  
       {          
 TcpListener listener = new TcpListener(new System.Net.IPAddress(new byte[] { 127, 0, 0, 1 }), 2222);
            listener.Start();20 21            
 //用专门的线程来接受请求22        
     Task.Factory.StartNew(() =>23      
       {24                 //不间断的接受客户端请求25            
     while (true)26            
     {27              
       //接受客户端的连接请求28                     var myclient = listener.AcceptTcpClient();29 30          
           //用工作线程执行用户的请求31                     Task.Factory.StartNew((obj) =>32               
      {33                         var client = obj as TcpClient;34 35         
                BinaryReader sr = new BinaryReader(client.GetStream());36 37                 
        //客户端数据38                         var data = sr.ReadString();39 40           
              //客户端ip41                         var ip = (IPEndPoint)client.Client.RemoteEndPoint;42 43            
             Console.WriteLine("当前时间:{0},接受到了来自IP:{1}:{2},的请求，发来的数据为:{3}", DateTime.Now,44                                                                                                 ip.Address, ip.Port, data);45 46                         Thread.Sleep(1000 * 5);47 48                         //处理完了之后要返回数据给客户端49                         BinaryWriter sw = new BinaryWriter(client.GetStream());50 51                         sw.Write(string.Format("当前时间:{0},服务端已经处理完毕！", DateTime.Now));52 53                         client.Close();54 55                     }, myclient);56                 }57             });58 59             Console.WriteLine("服务端已经启动...");60 61             Console.Read();62         }63     }64 }



