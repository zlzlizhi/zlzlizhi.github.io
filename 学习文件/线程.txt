线程得开启方法
1利用委托
声明委托 
 Func<int> a = xiancheng;//委托
     //IAsyncResult en=   a.BeginInvoke(null, null);//开启一个新的线程来执行A的事件
      //IAsyncResult可以取得当前线程的状态
     // while (en.IsCompleted == false)
                //   {
                //       Console.Write("qqqqq ");
                //   }
                //   int an = a.EndInvoke(en);//取得异步线程的返回值
                //   Console.WriteLine("main");
                //   Console.ReadKey();
                //通过回调检测线程结束
             //  a.BeginInvoke()里的参数前面的是委托事方法里的参数 倒数第二个是一个委托类型的参数，表示回调函数，
                 当线程结束时会调用这个委托指向的方法，倒数第一个参数用来给回调函数传递参数。          
  a.BeginInvoke(ar =>
                a.BeginInvoke(ar=>
            {
                int res = a.EndInvoke(ar);
               
                Console.WriteLine(res + "在Lambda表达式中取得");
            },null);
            Console.ReadKey();
    2利用Thread
     /创建出来Thread对象，这个线程并没有启动   Thread t = new Thread(File);
    //t.Start("xxx.种子");//开始，开始去执行线程/t.Start(这里是方法得参数);设置方法参数时只能设置为object类型的。
也可以在类里用构造函数来设置参数 在创建对象时直接初始化参数。    
 //Thread t = new Thread(my.DownFile);//我们构造一个thread对象的时候，可以传递一个静态方法，也可以传递一个对象的普通方法

 ??后台线程：后台线程是可以随时被CLR关闭而不引发异常的，也就是说当后台线程被关闭时，资源的回收是立即的，不等待的，也不考虑后台线程是否执行完成，
就算是正在执行中也立即被终止。【后台，存在于黑暗之中默默无闻，它的消亡和存在，别人也感受不到】



    前台线程：前台线程是不会被立即关闭的，它的关闭只会发生在自己执行完成时，不受外在因素的影响。假如应用程序退出，造成它的前台线程终止，
此时CLR仍然保持活动并运行，使应用程序能继续运行，当它的的前台线程都终止后，整个进程才会被销毁。

? ? ?
 说明:

(1)在任何时候我们都可以通过线程的IsBackground属性改变线程的前后台属性

(2)应用程序的主线程以及使用Thread构造的线程都默认为前台线程

? 
? 线程池线程也就是使用?ThreadPool.QueueUserWorkItem()和Task工厂创建的线程都默认为后台线程


在.NET框架在System.Diagnostics名称空间中，有一个类Process，可以用来创建一个新的进程。下面用代码来创建一个Hello.txt的记事本，运行代码后启动任务管理器，可以发现创建了一个记事本的进程。
namespace ProcessPgr
{
    class Program
    {
        static void Main(string[] args)
        {
            Process process = Process.Start("notepad.exe", "Hello.txt");//创建Hello.txt的记事本   Process.Start（应用名称，在这个应用中创建的子应用名称）
            Thread.Sleep(1000);
            Console.ReadLine();
            process.Kill();
        }
    }
}


3.线程

线程是进程中执行运算的最小单位，也是执行处理机调度的基本单位。实际上线程是轻量级的进程。那么为什么要使用线程呢？

（1）易于调度。 
（2）提高并发性。通过线程可方便有效地实现并发性。进程可创建多个线程来执行同一程序的不同部分。 
（3）开销少。创建线程比创建进程要快，所需开销很少。。 
（4）利于充分发挥多处理器的功能。通过创建多线程进程（即一个进程可具有两个或更多个线程），每个线程在一个处理器上运行，从而实现应用程序的并发性，使每个处理器都得到充分运行。 
进程和线程的关系 
（1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。 
（2）资源分配给进程，同一进程的所有线程共享该进程的所有资源。 
（3）处理机分给线程，即真正在处理机上运行的是线程。 
（4）线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。
例如我们创建一个winform窗体时，创建一个线程，将内容赋值给文本框，点击获取数据。此时如果直接在委托方法里面操作会报异常，因为创建的线程不能访问UI控件，所以我们在获取数据的时候，通过Invoke或者BeginInvoke去异步调用。









